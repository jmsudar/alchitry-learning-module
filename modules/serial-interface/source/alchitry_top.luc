module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx           // USB->Serial output
) {

    sig rst                 // reset signal

    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        dff data[8]            // flip-flops to store last character
        
        .rst(rst) {
            uart_rx rx(#BAUD(1_000_000), #CLK_FREQ(100_000_000))
            uart_tx tx(#BAUD(1_000_000), #CLK_FREQ(100_000_000))
        }        
    }

    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset

        led = 8h00              // turn LEDs off

        rx.rx = usb_rx          // connect rx input
        usb_tx = tx.tx          // connect tx output
    
        tx.new_data = rx.new_data
        tx.data = rx.data
        tx.block = 0            // no flow control, do not block
        
        if (rx.new_data) {      // new byte received
            data.d = rx.data    // save it
        }
        
        led = data.q            // output the data
    }
}