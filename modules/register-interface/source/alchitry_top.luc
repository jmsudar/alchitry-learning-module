module alchitry_top (
    input clk,              // 100MHz clock
    input rst_n,            // reset button (active low)
    output led[8],          // 8 user controllable LEDs
    input usb_rx,           // USB->Serial input
    output usb_tx           // USB->Serial output
) {

    sig rst                 // reset signal

    .clk(clk) {
        // The reset conditioner is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond
        
        .rst(rst) {
            dff led_reg[8]
            #CLK_FREQ(100_000_000) {
                register_interface reg
                #BAUD(1_000_000) {
                    uart_rx rx
                    uart_tx tx
                }
            }
        }        
    }

    always {
        reset_cond.in = ~rst_n  // input raw inverted reset signal
        rst = reset_cond.out    // conditioned reset
        
        led = led_reg.q
        
        usb_tx = tx.tx
        rx.rx = usb_rx
        
        reg.rx_data = rx.data
        reg.new_rx_data = rx.new_data
        tx.data = reg.tx_data
        tx.new_data = reg.new_tx_data
        reg.tx_busy = tx.busy
        tx.block = 0 // never block
        
        // default value
        reg.reg_in = <Register.response>(.data(32bx), .drdy(0))
        
        if (reg.reg_out.new_cmd) {
            if (reg.reg_out.write) { // write
                if (reg.reg_out.address == 0) { // address matches
                    led_reg.d = reg.reg_out.data[7:0] // update the value
                }
            } else { // read
                if (reg.reg_out.address == 0) { // address matches
                    reg.reg_in.drdy = 1 // data ready
                    reg.reg_in.data = led_reg.q // return the value
                }
            }
        }        
    }
}