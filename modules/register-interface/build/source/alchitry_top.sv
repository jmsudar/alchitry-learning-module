/*
    This file was generated automatically by Alchitry Labs 2.0.36-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module alchitry_top (
        input wire clk,
        input wire rst_n,
        output reg [7:0] led,
        input wire usb_rx,
        output reg usb_tx
    );
    logic rst;
    localparam _MP_STAGES_907839963 = 3'h4;
    logic M_reset_cond_in;
    logic M_reset_cond_out;
    
    reset_conditioner #(
        .STAGES(_MP_STAGES_907839963)
    ) reset_cond (
        .clk(clk),
        .in(M_reset_cond_in),
        .out(M_reset_cond_out)
    );
    
    
    logic [7:0] D_led_reg_d, D_led_reg_q = 0;
    localparam _MP_CLK_FREQ_1642856702 = 27'h5f5e100;
    logic [7:0] M_reg_rx_data;
    logic M_reg_new_rx_data;
    logic [7:0] M_reg_tx_data;
    logic M_reg_new_tx_data;
    logic M_reg_tx_busy;
    LucidGlobals::G_Register_request M_reg_reg_out;
    LucidGlobals::G_Register_response M_reg_reg_in;
    
    register_interface #(
        .CLK_FREQ(_MP_CLK_FREQ_1642856702)
    ) L_reg (
        .clk(clk),
        .rst(rst),
        .rx_data(M_reg_rx_data),
        .new_rx_data(M_reg_new_rx_data),
        .tx_data(M_reg_tx_data),
        .new_tx_data(M_reg_new_tx_data),
        .tx_busy(M_reg_tx_busy),
        .reg_out(M_reg_reg_out),
        .reg_in(M_reg_reg_in)
    );
    
    
    localparam _MP_CLK_FREQ_1147175459 = 27'h5f5e100;
    localparam _MP_BAUD_1147175459 = 20'hf4240;
    logic M_rx_rx;
    logic [7:0] M_rx_data;
    logic M_rx_new_data;
    
    uart_rx #(
        .CLK_FREQ(_MP_CLK_FREQ_1147175459),
        .BAUD(_MP_BAUD_1147175459)
    ) rx (
        .clk(clk),
        .rst(rst),
        .rx(M_rx_rx),
        .data(M_rx_data),
        .new_data(M_rx_new_data)
    );
    
    
    localparam _MP_CLK_FREQ_100133022 = 27'h5f5e100;
    localparam _MP_BAUD_100133022 = 20'hf4240;
    logic M_tx_tx;
    logic M_tx_block;
    logic M_tx_busy;
    logic [7:0] M_tx_data;
    logic M_tx_new_data;
    
    uart_tx #(
        .CLK_FREQ(_MP_CLK_FREQ_100133022),
        .BAUD(_MP_BAUD_100133022)
    ) tx (
        .clk(clk),
        .rst(rst),
        .tx(M_tx_tx),
        .block(M_tx_block),
        .busy(M_tx_busy),
        .data(M_tx_data),
        .new_data(M_tx_new_data)
    );
    
    
    always @* begin
        D_led_reg_d = D_led_reg_q;
        
        M_reset_cond_in = ~rst_n;
        rst = M_reset_cond_out;
        led = D_led_reg_q;
        usb_tx = M_tx_tx;
        M_rx_rx = usb_rx;
        M_reg_rx_data = M_rx_data;
        M_reg_new_rx_data = M_rx_new_data;
        M_tx_data = M_reg_tx_data;
        M_tx_new_data = M_reg_new_tx_data;
        M_reg_tx_busy = M_tx_busy;
        M_tx_block = 1'h0;
        M_reg_reg_in = {{32'bxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, 1'h0}};
        if (M_reg_reg_out.new_cmd) begin
            if (M_reg_reg_out.write) begin
                if (M_reg_reg_out.address == 1'h0) begin
                    D_led_reg_d = M_reg_reg_out.data[3'h7:1'h0];
                end
            end else begin
                if (M_reg_reg_out.address == 1'h0) begin
                    M_reg_reg_in.drdy = 1'h1;
                    M_reg_reg_in.data = D_led_reg_q;
                end
            end
        end
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_led_reg_q <= 0;
        end else begin
            D_led_reg_q <= D_led_reg_d;
        end
    end
endmodule